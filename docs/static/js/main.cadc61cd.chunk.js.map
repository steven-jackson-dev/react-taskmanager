{"version":3,"sources":["utils/common/index.js","context/TaskStore.js","components/AppSnackBar/index.js","pages/Homepage/index.js","global/AppRoutes.module.js","components/AppFooter/index.js","components/AppDrawer/index.js","components/AppNavBar/index.js","components/AppHeader/index.js","utils/hooks/useInputState.js","components/AppTaskForm/index.js","components/AppTaskList/AppTaskListItem/index.js","components/AppTaskList/index.js","global/AppRenderRoutes.module.js","App.js","index.js"],"names":["DATE_TODAY","Date","toISOString","slice","split","join","StoreContext","createContext","TaskFormContext","reducer","state","action","type","tasks","map","task","id","payload","isCompleted","Math","floor","random","console","log","filter","formReducer","newState","isOpen","isEdit","isSnackBar","snackBar","message","initialFormState","initialState","taskName","taskDescription","createdAt","updatedAt","taskDueDate","TaskStore","children","useReducer","dispatch","formState","formDispatch","Provider","value","Alert","props","elevation","variant","useStyles","makeStyles","theme","root","width","marginTop","spacing","AppSnackBar","classes","useContext","handleClose","event","reason","className","Snackbar","anchorOrigin","vertical","horizontal","open","autoHideDuration","onClose","severity","AppRoutes","name","path","page","style","padding","Grid","container","item","xs","sm","Typography","gutterBottom","component","textAlign","margin","Fab","color","aria-label","onClick","AppTaskForm","inMenu","AppFooter","withRouter","appDrawerIsOpen","toggleDrawer","Drawer","anchor","key","Divider","List","route","ListItem","ListItemIcon","icon","to","textDecoration","ListItemText","primary","flexGrow","menuButton","marginRight","title","AppBar","position","Toolbar","Button","AppHeader","initialVal","useState","setState","e","target","Transition","forwardRef","ref","Slide","direction","useInputState","inputTaskName","setInputTaskName","inputTaskDesc","setInputTaskDesc","inputTaskDueDate","setInputTaskDueDate","useEffect","handleSubmitTask","Dialog","TransitionComponent","keepMounted","aria-labelledby","aria-describedby","DialogTitle","DialogContent","TextField","label","onChange","fullWidth","required","multiline","rows","InputLabelProps","shrink","defaultValue","DialogActions","AppTaskListItem","ExpansionPanel","ExpansionPanelSummary","backgroundColor","expandIcon","aria-controls","FormControlLabel","control","Checkbox","checked","ExpansionPanelDetails","defaultProps","dueDate","AppTaskList","taskList","AppRenderRoutes","location","useLocation","TransitionGroup","CSSTransition","classNames","timeout","enter","exit","exact","render","App","Container","marginBottom","ReactDOM","basename","document","getElementById"],"mappings":"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","file":"static/js/main.cadc61cd.chunk.js","sourcesContent":["export const DATE_TODAY = () => {\r\n    return new Date().toISOString().slice(0, 10).split('-').join('-')\r\n}\r\n\r\nexport const parseDate = (date) => {\r\n    return new Date().toISOString().slice(0, 10).split('-').join('-')\r\n}\r\n\r\n","import React, { createContext, useReducer } from 'react'\r\nimport { DATE_TODAY } from 'utils/common/index';\r\n\r\nexport const StoreContext = createContext([]);\r\nexport const TaskFormContext = createContext([]);\r\n\r\nfunction reducer(state, action) {\r\n\r\n    switch (action.type) {\r\n        case 'TOGGLE_COMPLETED':\r\n            return {\r\n                tasks: state.tasks.map(task => {\r\n                    if (task.id === action.payload) {\r\n                        task.isCompleted = !task.isCompleted\r\n                        return task\r\n                    }\r\n                    return task\r\n                })\r\n            }\r\n        case 'ADD_TASK':\r\n            action.payload.id = Math.floor(Math.random() * 999);\r\n            return {\r\n                tasks: [...state.tasks, { ...action.payload }]\r\n            }\r\n        case 'UPDATE_TASK':\r\n            return {\r\n                tasks: state.tasks.map(task => {\r\n                    console.log(\"reducer -> task\", task)\r\n\r\n                    if (task.id === action.payload.id) {\r\n\r\n                        return action.payload\r\n                    }\r\n                    return task\r\n                })\r\n            }\r\n        case 'DELETE_TASK':\r\n            return { tasks: state.tasks.filter(task => task.id !== action.payload) }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nfunction formReducer(state, action) {\r\n    console.log(\"formReducer -> action\", action)\r\n    let newState = { ...state };\r\n    switch (action.type) {\r\n        case 'SET_EDIT_MODE':\r\n            newState.task = action.payload;\r\n            newState.isOpen = true;\r\n            newState.isEdit = true;\r\n            console.log(\"formReducer -> newState\", newState)\r\n            return newState\r\n        case 'TOGGLE_FORM':\r\n            newState.isOpen = !state.isOpen\r\n            newState.isEdit = false;\r\n            return newState\r\n        case 'SHOW_SNACKBAR':\r\n            newState.isSnackBar.isOpen = true\r\n            newState.isSnackBar.type = action.payload.snackBar.type\r\n            newState.isSnackBar.message = action.payload.snackBar.message\r\n            return newState\r\n        case 'CLOSE_SNACKBAR':\r\n            newState.isSnackBar.isOpen = false\r\n            return newState\r\n        case 'RESET_FORM_STATE':\r\n            return initialFormState\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\n\r\nconst TaskStore = ({ children }) => {\r\n    const [state, dispatch] = useReducer(reducer, initialState)\r\n    const [formState, formDispatch] = useReducer(formReducer, initialFormState)\r\n    return (\r\n        <TaskFormContext.Provider value={[formState, formDispatch]}>\r\n            <StoreContext.Provider value={[state, dispatch]}>{children}</StoreContext.Provider>\r\n        </TaskFormContext.Provider>\r\n    )\r\n}\r\n\r\nconst initialFormState = {\r\n    task: {},\r\n    isEdit: false,\r\n    isOpen: false,\r\n    isSnackBar: {\r\n        isOpen: false,\r\n        type: 'success',\r\n        message: 'Default Snackbar Message'\r\n    }\r\n}\r\n\r\nconst initialState = {\r\n    tasks: [{\r\n        id: Math.floor(Math.random() * 999),\r\n        taskName: 'New Task',\r\n        taskDescription: 'Default Task Description',\r\n        isCompleted: false,\r\n        createdAt: DATE_TODAY(),\r\n        updatedAt: DATE_TODAY(),\r\n        taskDueDate: DATE_TODAY()\r\n    },\r\n    {\r\n        id: Math.floor(Math.random() * 999),\r\n        taskName: 'Completed Task',\r\n        taskDescription: 'Default Task Description',\r\n        isCompleted: true,\r\n        createdAt: DATE_TODAY(),\r\n        updatedAt: DATE_TODAY(),\r\n        taskDueDate: DATE_TODAY()\r\n    }]\r\n}\r\n\r\nexport default TaskStore\r\n","import React, { useContext } from 'react'\r\nimport { TaskFormContext } from 'context/TaskStore';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nfunction Alert(props) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        '& > * + *': {\r\n            marginTop: theme.spacing(2),\r\n        },\r\n    },\r\n}));\r\n\r\nexport default function AppSnackBar() {\r\n    const classes = useStyles();\r\n    const [formState, formDispatch] = useContext(TaskFormContext);\r\n    const { isOpen, message, type } = formState.isSnackBar;\r\n\r\n    const handleClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        formDispatch({ type: 'CLOSE_SNACKBAR' })\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n\r\n            <Snackbar anchorOrigin={{ vertical: 'top', horizontal: 'right' }} open={isOpen} autoHideDuration={3000} onClose={handleClose}>\r\n                <Alert onClose={handleClose} severity={type}>\r\n                    {message}\r\n                </Alert>\r\n            </Snackbar>\r\n            {/* <Alert severity=\"error\">This is an error message!</Alert>\r\n            <Alert severity=\"warning\">This is a warning message!</Alert>\r\n            <Alert severity=\"info\">This is an information message!</Alert>\r\n            <Alert severity=\"success\">This is a success message!</Alert> */}\r\n        </div>\r\n    );\r\n}\r\n","import React, { useContext } from 'react'\r\nimport { StoreContext, TaskFormContext } from 'context/TaskStore';\r\n\r\nimport { Typography, Grid } from '@material-ui/core'\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Fab from '@material-ui/core/Fab';\r\n\r\nimport { AppTaskForm, AppTaskList } from 'components';\r\nimport AppSnackBar from 'components/AppSnackBar';\r\n\r\nconst Homepage = () => {\r\n\r\n  // USE CONTEXT API\r\n  const [tasks, dispatch] = useContext(StoreContext);\r\n  const [formState, formDispatch] = useContext(TaskFormContext);\r\n\r\n  return (\r\n    <section className=\"TaskManager\" style={{ padding: '2em 0' }}>\r\n<AppSnackBar/>\r\n      {/* GRID CONTAINER */}\r\n      <Grid container>\r\n        {/* SHOW TASK LIST COMPONENT */}\r\n        <Grid item xs={12} sm={10}>\r\n          <div className=\"OpenTasks\">\r\n            <Typography gutterBottom variant=\"h6\" component=\"h2\" style={{ padding: '.5em 0' }}>Open Tasks:</Typography>\r\n            <AppTaskList {...tasks} />\r\n          </div>\r\n\r\n          <div className=\"CompletedTasks\">\r\n            <Typography gutterBottom variant=\"h6\" component=\"h2\" style={{ padding: '.5em 0', marginTop: '1em' }}>Completed Tasks:</Typography>\r\n            <AppTaskList  {...tasks} isCompleted />\r\n          </div>\r\n        </Grid>\r\n        {/* !SHOW TASK LIST COMPONENT */}\r\n\r\n        {/* ADD TASK FLOATING ACTION BUTTON */}\r\n        <Grid item xs={12} sm={2}>\r\n          <div className=\"TaskManagerAddTask\" style={{ textAlign: 'center', margin: '2em 0' }}>\r\n            <Fab color=\"primary\" aria-label=\"add Task\" onClick={() => formDispatch({ type: 'TOGGLE_FORM' })}><AddIcon /></Fab>\r\n          </div>\r\n        </Grid>\r\n        {/* !ADD TASK FLOATING ACTION BUTTON */}\r\n      </Grid>\r\n      {/* !GRID CONTAINER */}\r\n\r\n      {/* FORM COMPONENT */}\r\n      <div className='TaskManagerForm'>\r\n        <AppTaskForm />\r\n      </div>\r\n      {/* !FORM COMPONENT */}\r\n\r\n    </section>\r\n  )\r\n}\r\n\r\n\r\nexport default Homepage\r\n","import Homepage from \"pages/Homepage\"\r\n\r\nconst AppRoutes = [\r\n    {\r\n        id: 'homepage',\r\n        name: 'Homepage',\r\n        path: '/',\r\n        page: Homepage,\r\n        inMenu: false\r\n    },\r\n\r\n]\r\nexport default AppRoutes\r\n","import React from 'react'\r\nimport { Typography } from '@material-ui/core'\r\nconst AppFooter = () => {\r\n    return (\r\n        <footer style={{ textAlign: 'center' }}>\r\n            <Typography variant=\"body2\" component=\"p\">\r\n                Steven Jackson - 2020\r\n            </Typography>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default AppFooter\r\n","import React from 'react';\r\nimport { Drawer, List, Divider, ListItem, ListItemIcon, ListItemText } from '@material-ui/core';\r\nimport AppRoutes from 'global/AppRoutes.module'\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nconst AppDrawer = (props) => {\r\n    const { appDrawerIsOpen, toggleDrawer } = props\r\n\r\n    const handletoggleDrawer = (event) => {\r\n        if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\r\n            return;\r\n        }\r\n        toggleDrawer()\r\n    };\r\n\r\n    return (\r\n        <section className=\"AppDrawer\">\r\n            {<Drawer\r\n                anchor=\"left\"\r\n                open={appDrawerIsOpen}\r\n                onClick={handletoggleDrawer}>\r\n\r\n                <Divider />\r\n                <List style={{ width: '250px' }}>\r\n                    {AppRoutes.map(route => {\r\n                        return <ListItem key={route.id}>\r\n                            <ListItemIcon><FontAwesomeIcon icon={route.icon} /></ListItemIcon>\r\n                            <Link to={route.path} style={{textDecoration: 'none'}}><ListItemText primary={route.name}/></Link>\r\n                        </ListItem>\r\n                    })}\r\n                </List>\r\n                <Divider />\r\n            </Drawer>}\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default withRouter(AppDrawer)","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { AppBar, Toolbar, Button, Typography } from '@material-ui/core';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport AppRoutes from 'global/AppRoutes.module'\r\n\r\nconst AppNavBar = (props) => {\r\n\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n                        React Task Manager\r\n            </Typography>\r\n\r\n                    {AppRoutes.map(route => {\r\n                        if (route.inMenu) {\r\n                            return <Link key={route.id} to={route.path} style={{ textDecoration: 'none' }}>\r\n                                <Button style={{ color: 'white' }}>{route.name}</Button>\r\n                            </Link>\r\n                        }\r\n                        return ''\r\n                    })}\r\n                </Toolbar>\r\n            </AppBar>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n}));\r\n\r\nexport default withRouter(AppNavBar)","import React from 'react'\r\nimport AppNavBar from 'components/AppNavBar'\r\n\r\nconst AppHeader = () => {\r\n    return (\r\n        <header className=\"App-header\">\r\n            <AppNavBar />\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default AppHeader\r\n","import { useState } from 'react'\r\nexport default initialVal => {\r\n    const [state, setState] = useState(initialVal);\r\n\r\n    const handleChange = e => {\r\n        (typeof e === 'object') ? setState(e.target.value) : setState(e);\r\n    }\r\n    return [state, handleChange]\r\n}","import React, { useContext, useEffect, forwardRef } from 'react';\r\nimport { StoreContext, TaskFormContext } from 'context/TaskStore';\r\nimport { DATE_TODAY, parseDate } from 'utils/common/index';\r\nimport useInputState from 'utils/hooks/useInputState';\r\n\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, Slide, TextField } from '@material-ui/core';\r\n\r\nconst Transition = forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nexport default function AppTaskForm() {\r\n\r\n    const [state, dispatch] = useContext(StoreContext);\r\n    const [formState, formDispatch] = useContext(TaskFormContext);\r\n\r\n    const [inputTaskName, setInputTaskName] = useInputState('');\r\n    const [inputTaskDesc, setInputTaskDesc] = useInputState('');\r\n    const [inputTaskDueDate, setInputTaskDueDate] = useInputState(DATE_TODAY);\r\n\r\n    // SET PAYLOAD FOR REDUCERS\r\n    const payload = {\r\n        'id': (formState.task.id) ? formState.task.id : 0,\r\n        'taskName': inputTaskName,\r\n        'taskDescription': inputTaskDesc,\r\n        'taskDueDate': inputTaskDueDate,\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        // IF FORM IS IN EDIT MODE SET INPUT VALUES OR SET TO BLANK TO ADD A NEW TASK\r\n        if (formState.isEdit) {\r\n            const { taskName, taskDescription, taskDueDate } = formState.task;\r\n            setInputTaskName(taskName)\r\n            setInputTaskDesc(taskDescription)\r\n            setInputTaskDueDate(taskDueDate)\r\n        } else {\r\n            setInputTaskName('')\r\n            setInputTaskDesc('')\r\n            setInputTaskDueDate(DATE_TODAY)\r\n        }\r\n    }, [formState])\r\n\r\n    const validateInputs = () => {\r\n        if (!inputTaskName || !inputTaskDesc || !inputTaskDueDate) {\r\n            formDispatch({ type: 'SHOW_SNACKBAR', payload: { snackBar: { isOpen: true, type: 'error', message: 'Fields cannot be empty' } } })\r\n        } else {\r\n            handleSubmitTask()\r\n        }\r\n    }\r\n\r\n    const handleSubmitTask = () => {\r\n\r\n        // IF FORM IS IN EDIT MODE. UPDATE THE TASK OR ADD A NEW TASK\r\n        if (formState.isEdit) {\r\n            dispatch({ type: 'UPDATE_TASK', payload: payload })\r\n            formDispatch({ type: 'SHOW_SNACKBAR', payload: { snackBar: { isOpen: true, type: 'success', message: 'Task Updated Successfully' } } })\r\n\r\n            handleClose()\r\n            formDispatch({ type: 'RESET_FORM_STATE' })\r\n        } else {\r\n            dispatch({ type: 'ADD_TASK', payload: payload })\r\n            formDispatch({ type: 'SHOW_SNACKBAR', payload: { snackBar: { isOpen: true, type: 'success', message: 'Task Added Successfully' } } })\r\n            handleClose()\r\n        }\r\n\r\n    }\r\n\r\n    const handleClose = () => {\r\n        // TOGGLE THE DIALOG WITH THE TASK FORM\r\n        formDispatch({ type: 'TOGGLE_FORM' })\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n\r\n            <Dialog\r\n                open={formState.isOpen}\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                onClose={handleClose}\r\n                aria-labelledby=\"task-manager-form\"\r\n                aria-describedby=\"task-manager-form-dialog\">\r\n                <DialogTitle id=\"task-manager-form-dialog-title\">{\"Add New Task\"}</DialogTitle>\r\n                <DialogContent>\r\n\r\n                    <TextField id=\"taskName\" label=\"Task Name\" onChange={setInputTaskName} value={inputTaskName} fullWidth required />\r\n\r\n                    <TextField\r\n                        id=\"taskDescription\"\r\n                        label=\"Task Description\"\r\n                        onChange={setInputTaskDesc}\r\n                        multiline\r\n                        rows={4}\r\n                        fullWidth\r\n                        style={{ margin: '1.5em 0' }}\r\n                        value={inputTaskDesc}\r\n                        required\r\n                    />\r\n\r\n                    <TextField\r\n                        id=\"taskDueDate\"\r\n                        onChange={setInputTaskDueDate}\r\n                        label=\"Due Date\"\r\n                        type=\"date\"\r\n                        fullWidth\r\n                        InputLabelProps={{\r\n                            shrink: true,\r\n                        }}\r\n                        style={{ margin: '1em 0' }}\r\n                        defaultValue={(inputTaskDueDate) ? parseDate(inputTaskDueDate) : DATE_TODAY()}\r\n\r\n                        required\r\n                    />\r\n\r\n                </DialogContent>\r\n\r\n                <DialogActions>\r\n                    <Button onClick={handleClose} color=\"primary\">Cancel</Button>\r\n                    <Button onClick={validateInputs} type='submit' color=\"primary\" variant='contained'>Save</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}","import React, { useContext } from 'react'\r\nimport { StoreContext, TaskFormContext } from 'context/TaskStore';\r\nimport { Button, ExpansionPanelSummary, ExpansionPanelDetails, ExpansionPanel, Checkbox, FormControlLabel, Typography, Grid } from '@material-ui/core';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\n\r\nconst AppTaskListItem = (props) => {\r\n    const { id, taskName, taskDescription, taskDueDate, isCompleted } = props\r\n    const [state, dispatch] = useContext(StoreContext);\r\n    const [formState, formDispatch] = useContext(TaskFormContext);\r\n\r\n    const handleEditClick = (e) => {\r\n        formDispatch({ type: 'SET_EDIT_MODE', payload: props })\r\n    }\r\n    const handleDelete = () => {\r\n        formDispatch({ type: 'SHOW_SNACKBAR', payload: { snackBar: { isOpen: true, type: 'info', message: 'Task Deleted' } } })\r\n        dispatch({ type: 'DELETE_TASK', payload: id })\r\n    };\r\n\r\n    return (\r\n        <ExpansionPanel>\r\n            <ExpansionPanelSummary style={{ color: isCompleted ? '#fff' : 'inherit', backgroundColor: isCompleted ? '#3f51b5' : 'inherit' }}\r\n                expandIcon={<ExpandMoreIcon style={{ color: isCompleted ? '#fff' : 'inherit' }} />}\r\n                aria-label=\"Expand\"\r\n                aria-controls=\"task-description-content-header\"\r\n                id=\"task-description-content-header\">\r\n\r\n                <FormControlLabel\r\n                    aria-label=\"Is Completed\"\r\n                    control={<Checkbox\r\n                        style={{ color: isCompleted ? '#fff' : 'inherit' }}\r\n                        checked={isCompleted}\r\n                        onChange={() => dispatch({ type: 'TOGGLE_COMPLETED', payload: id })} />\r\n                    }\r\n                    label={`${taskName}`} />\r\n            </ExpansionPanelSummary>\r\n\r\n            <ExpansionPanelDetails>\r\n                <Grid container>\r\n                    <Grid item xs={12}>\r\n                        <Typography color=\"textSecondary\" style={{ padding: '0.5em 0px 3em 0 ', textAlign: 'left' }}>{taskDescription}</Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12} style={{ textAlign: 'center' }}>\r\n                        {!isCompleted && <Button variant=\"contained\" color=\"primary\" onClick={handleEditClick} style={{ marginRight: '1em' }}>Edit</Button>}\r\n                        <Button variant=\"contained\" color=\"secondary\" onClick={handleDelete}>Delete</Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </ExpansionPanelDetails>\r\n\r\n        </ExpansionPanel>\r\n    )\r\n}\r\n\r\n\r\nAppTaskListItem.defaultProps = {\r\n    id: 1,\r\n    taskName: 'Default Task',\r\n    taskDescription: 'Default Description',\r\n    isCompleted: false,\r\n    createdAt: 'date',\r\n    updatedAt: 'date',\r\n    dueDate: 'date'\r\n}\r\n\r\nexport default AppTaskListItem\r\n","import React, { useContext } from 'react'\r\nimport AppTaskListItem from './AppTaskListItem/index';\r\nimport { StoreContext } from 'context/TaskStore';\r\n\r\n\r\nconst AppTaskList = (props) => {\r\n    const { tasks, isCompleted } = props;\r\n    const [state, dispatch] = useContext(StoreContext);\r\n\r\n    const taskList =\r\n        (isCompleted) ?\r\n            tasks.filter(task => task.isCompleted) :\r\n            tasks.filter(task => !task.isCompleted);\r\n\r\n    return (\r\n        <div>\r\n            {taskList.map(task => {\r\n                return <AppTaskListItem key={task.id} {...task} />\r\n            })}\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nAppTaskList.defaultProps = {\r\n    tasks: [{\r\n        id: 1,\r\n        taskName: 'Open Default Task',\r\n        taskDescription: 'Default Task Description',\r\n        isCompleted: false,\r\n        createdAt: 'date',\r\n        updatedAt: 'date',\r\n        dueDate: 'date'\r\n    },\r\n    {\r\n        id: 2,\r\n        taskName: 'Open Default Task',\r\n        taskDescription: 'Default Task Description',\r\n        isCompleted: false,\r\n        createdAt: 'date',\r\n        updatedAt: 'date',\r\n        dueDate: 'date'\r\n    },\r\n    {\r\n        id: 3,\r\n        taskName: 'Completed Default Task',\r\n        taskDescription: 'Default Task Description',\r\n        isCompleted: true,\r\n        createdAt: 'date',\r\n        updatedAt: 'date',\r\n        dueDate: 'date'\r\n    },\r\n    {\r\n        id: 4,\r\n        taskName: 'Completed Default Task',\r\n        taskDescription: 'Default Task Description',\r\n        isCompleted: true,\r\n        createdAt: 'date',\r\n        updatedAt: 'date',\r\n        dueDate: 'date'\r\n    },\r\n    {\r\n        id: 5,\r\n        taskName: 'Open Default Task',\r\n        taskDescription: 'Default Task Description',\r\n        isCompleted: false,\r\n        createdAt: 'date',\r\n        updatedAt: 'date',\r\n        dueDate: 'date'\r\n    },\r\n    ]\r\n}\r\n\r\nexport default AppTaskList\r\n","import React from 'react'\r\nimport { Route, Switch, useLocation } from \"react-router-dom\";\r\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\r\nimport AppRoutes from 'global/AppRoutes.module'\r\n\r\nconst AppRenderRoutes = () => {\r\n    let location = useLocation();\r\n    return (\r\n        <TransitionGroup>\r\n            <CSSTransition\r\n                key={location.id}\r\n                classNames=\"fade\"\r\n                timeout={{ enter: 800, exit: 0 }}>\r\n\r\n                <Switch location={location}>\r\n                    {AppRoutes.map(route => {\r\n                        return <Route key={route.id} exact path={route.path} component={route.page} />\r\n                    })}\r\n                    <Route exact path='' render={() => `404 - Page Not Found`} />\r\n                </Switch>\r\n            </CSSTransition>\r\n        </TransitionGroup>\r\n    )\r\n}\r\n\r\n\r\nexport default AppRenderRoutes\r\n","import React from 'react';\r\nimport { AppHeader, AppFooter } from 'components';\r\nimport { Container } from '@material-ui/core'\r\nimport AppRenderRoutes from 'global/AppRenderRoutes.module';\r\nimport 'global/global.css';\r\nimport TaskStore from 'context/TaskStore';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <TaskStore>\r\n        <AppHeader />\r\n        <Container style={{ marginBottom: '2em' }}>\r\n          <AppRenderRoutes />\r\n        </Container>\r\n        <AppFooter />\r\n      </TaskStore>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <BrowserRouter basename='/react-taskmanager'>\r\n        <App />\r\n    </BrowserRouter>, document.getElementById('root'));\r\n"],"sourceRoot":""}