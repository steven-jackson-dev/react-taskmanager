{"version":3,"sources":["api/index.js","utils/common/index.js","context/TaskStore.js","components/AppSnackBar/index.js","pages/Homepage/index.js","global/AppRoutes.module.js","components/AppFooter/index.js","components/AppDrawer/index.js","components/AppNavBar/index.js","components/AppHeader/index.js","utils/hooks/useInputState.js","components/AppTaskForm/index.js","components/AppTaskList/AppTaskListItem/index.js","components/AppTaskList/index.js","global/AppRenderRoutes.module.js","App.js","index.js"],"names":["url","fetchTasks","a","axios","get","data","console","log","createTask","task","post","updateTask","put","id","deleteTask","delete","DATE_TODAY","Date","toISOString","slice","split","join","StoreContext","createContext","TaskFormContext","reducer","state","action","type","tasks","map","payload","is_completed","Math","floor","random","filter","formReducer","newState","isOpen","isEdit","isSnackBar","snackBar","message","initialFormState","initialState","task_name","task_description","is_highlighted","created_at","updated_at","TaskStore","children","useReducer","dispatch","formState","formDispatch","Provider","value","Alert","props","elevation","variant","useStyles","makeStyles","theme","root","width","marginTop","spacing","AppSnackBar","classes","useContext","handleClose","event","reason","className","Snackbar","anchorOrigin","vertical","horizontal","open","autoHideDuration","onClose","severity","AppRoutes","name","path","page","useEffect","fetchAllTasks","style","padding","Grid","container","item","xs","sm","Typography","gutterBottom","component","textAlign","margin","Fab","color","aria-label","onClick","AppTaskForm","inMenu","AppFooter","withRouter","appDrawerIsOpen","toggleDrawer","Drawer","anchor","key","Divider","List","route","ListItem","ListItemIcon","icon","to","textDecoration","ListItemText","primary","flexGrow","menuButton","marginRight","title","AppBar","position","Toolbar","Button","AppHeader","initialVal","useState","setState","e","target","Transition","forwardRef","ref","Slide","direction","useInputState","inputTaskName","setInputTaskName","inputTaskDesc","setInputTaskDesc","inputTaskDueDate","setInputTaskDueDate","due_date","handleSubmitTask","Dialog","TransitionComponent","keepMounted","aria-labelledby","aria-describedby","DialogTitle","DialogContent","TextField","label","onChange","fullWidth","required","multiline","rows","InputLabelProps","shrink","defaultValue","DialogActions","AppTaskListItem","ExpansionPanel","ExpansionPanelSummary","backgroundColor","expandIcon","aria-controls","FormControlLabel","control","Checkbox","checked","ExpansionPanelDetails","defaultProps","AppTaskList","taskList","AppRenderRoutes","location","useLocation","TransitionGroup","CSSTransition","classNames","timeout","enter","exit","exact","render","App","Container","marginBottom","ReactDOM","basename","document","getElementById"],"mappings":"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","file":"static/js/main.8edbcc5a.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst url = 'http://178.128.37.229';\r\n\r\nexport const fetchTasks = async () => {\r\n    try {\r\n        const { data } = await axios.get(`${url}/tasks`)\r\n        return data\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}\r\n\r\nexport const createTask = async (task) => {\r\n    console.log(\"createTask -> task\", task)\r\n    try {\r\n        const { data } = await axios.post(`${url}/tasks`, task)\r\n        return data\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}\r\n\r\nexport const updateTask = async (task) => {\r\n    console.log(\"updateTask -> task\", task)\r\n    try {\r\n        const { data } = await axios.put(`${url}/tasks/${task.id}`, task)\r\n        return data\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}\r\n\r\nexport const deleteTask = async (id) => {\r\n    try {\r\n        const { data } = await axios.delete(`${url}/tasks/${id}`)\r\n        return data\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}","export const DATE_TODAY = () => {\r\n    return new Date().toISOString().slice(0, 10).split('-').join('-')\r\n}\r\n\r\nexport const parseDate = (date) => {\r\n    return new Date().toISOString().slice(0, 10).split('-').join('-')\r\n}\r\n\r\n","import React, { createContext, useReducer } from 'react'\r\nimport { createTask, deleteTask, updateTask } from 'api/index'\r\nimport { DATE_TODAY } from 'utils/common/index';\r\n\r\nexport const StoreContext = createContext([]);\r\nexport const TaskFormContext = createContext([]);\r\n\r\nfunction reducer(state, action) {\r\n\r\n    switch (action.type) {\r\n        case 'TOGGLE_COMPLETED':\r\n            return {\r\n                tasks: state.tasks.map(task => {\r\n                    if (task.id === action.payload) {\r\n                        task.is_completed = !task.is_completed\r\n                        updateTask(task)\r\n                        return task\r\n                    }\r\n                    return task\r\n                })\r\n            }\r\n        case 'ADD_TASK':\r\n            createTask(action.payload)\r\n            action.payload.id = Math.floor(Math.random() * 999);\r\n            return {\r\n                tasks: [...state.tasks, { ...action.payload }]\r\n            }\r\n        case 'SET_TASKS':\r\n            return {\r\n                tasks: [...state.tasks, ...action.payload.tasks]\r\n            }\r\n        case 'UPDATE_TASK':\r\n            updateTask(action.payload)\r\n\r\n            return {\r\n                tasks: state.tasks.map(task => {\r\n                    if (task.id === action.payload.id) {\r\n\r\n                        return action.payload\r\n                    }\r\n                    return task\r\n                })\r\n            }\r\n        case 'DELETE_TASK':\r\n            deleteTask(action.payload)\r\n            return { tasks: state.tasks.filter(task => task.id !== action.payload) }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nfunction formReducer(state, action) {\r\n    let newState = { ...state };\r\n    switch (action.type) {\r\n        case 'SET_EDIT_MODE':\r\n            newState.task = action.payload;\r\n            newState.isOpen = true;\r\n            newState.isEdit = true;\r\n            console.log(\"formReducer -> newState\", newState)\r\n            return newState\r\n        case 'TOGGLE_FORM':\r\n            newState.isOpen = !state.isOpen\r\n            newState.isEdit = false;\r\n            return newState\r\n        case 'SHOW_SNACKBAR':\r\n            newState.isSnackBar.isOpen = true\r\n            newState.isSnackBar.type = action.payload.snackBar.type\r\n            newState.isSnackBar.message = action.payload.snackBar.message\r\n            return newState\r\n        case 'CLOSE_SNACKBAR':\r\n            newState.isSnackBar.isOpen = false\r\n            return newState\r\n        case 'RESET_FORM_STATE':\r\n            return initialFormState\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\n\r\nconst TaskStore = ({ children }) => {\r\n    const [state, dispatch] = useReducer(reducer, initialState)\r\n    const [formState, formDispatch] = useReducer(formReducer, initialFormState)\r\n    return (\r\n        <TaskFormContext.Provider value={[formState, formDispatch]}>\r\n            <StoreContext.Provider value={[state, dispatch]}>{children}</StoreContext.Provider>\r\n        </TaskFormContext.Provider>\r\n    )\r\n}\r\n\r\nconst initialFormState = {\r\n    task: {},\r\n    isEdit: false,\r\n    isOpen: false,\r\n    isSnackBar: {\r\n        isOpen: false,\r\n        type: 'success',\r\n        message: 'Default Snackbar Message'\r\n    }\r\n}\r\n\r\nconst initialState = {\r\n    tasks: [{\r\n        id: Math.floor(Math.random() * 999),\r\n        task_name: 'Hello From Steven Jackson',\r\n        task_description: 'Hi there, thank you for checking out my small little project. I know things are rather basic and definitely not flushed out, however I am just tinkering around with React and do not plan to actually use this version. ',\r\n        is_completed: false,\r\n        is_highlighted: true,\r\n        created_at: DATE_TODAY(),\r\n        updated_at: DATE_TODAY(),\r\n    },\r\n    {\r\n        id: Math.floor(Math.random() * 999),\r\n        task_name: 'Project Info',\r\n        task_description: 'This project is connected to my private API that I am currently building. You are welcome to leave your mark here or play around. End Point: http://178.128.37.229/tasks/. Kind Regards, Steven',\r\n        is_completed: false,\r\n        is_highlighted: true,\r\n        created_at: DATE_TODAY(),\r\n        updated_at: DATE_TODAY(),\r\n    }]\r\n}\r\n\r\nexport default TaskStore\r\n","import React, { useContext } from 'react'\r\nimport { TaskFormContext } from 'context/TaskStore';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\n\r\nfunction Alert(props) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        '& > * + *': {\r\n            marginTop: theme.spacing(2),\r\n        },\r\n    },\r\n}));\r\n\r\nexport default function AppSnackBar() {\r\n    const classes = useStyles();\r\n    const [{ isSnackBar }, formDispatch] = useContext(TaskFormContext);\r\n    const { isOpen, message, type } = isSnackBar;\r\n\r\n    const handleClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        formDispatch({ type: 'CLOSE_SNACKBAR' })\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Snackbar anchorOrigin={{ vertical: 'top', horizontal: 'right' }} open={isOpen} autoHideDuration={3000} onClose={handleClose}>\r\n                <Alert onClose={handleClose} severity={type}>\r\n                    {message}\r\n                </Alert>\r\n            </Snackbar>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useContext, useEffect } from 'react'\r\nimport { StoreContext, TaskFormContext } from 'context/TaskStore';\r\n\r\nimport { Typography, Grid } from '@material-ui/core'\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Fab from '@material-ui/core/Fab';\r\n\r\nimport { AppTaskForm, AppTaskList } from 'components';\r\nimport AppSnackBar from 'components/AppSnackBar';\r\nimport { fetchTasks } from 'api/index';\r\n\r\nconst Homepage = () => {\r\n\r\n  // USE CONTEXT API\r\n  const [tasks, dispatch] = useContext(StoreContext);\r\n  // eslint-disable-next-line no-unused-vars\r\n  const [formState, formDispatch] = useContext(TaskFormContext);\r\n\r\n  useEffect(() => {\r\n    fetchAllTasks()\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [])\r\n\r\n  const fetchAllTasks = async () => {\r\n    const tasks = await fetchTasks();\r\n    if (tasks) dispatch({ type: 'SET_TASKS', payload: { 'tasks': tasks } })\r\n  }\r\n\r\n  return (\r\n    <section className=\"TaskManager\" style={{ padding: '2em 0' }}>\r\n      <AppSnackBar />\r\n      {/* GRID CONTAINER */}\r\n      <Grid container>\r\n        {/* SHOW TASK LIST COMPONENT */}\r\n        <Grid item xs={12} sm={10}>\r\n          <div className=\"OpenTasks\">\r\n            <Typography gutterBottom variant=\"h6\" component=\"h2\" style={{ padding: '.5em 0' }}>Open Tasks:</Typography>\r\n            <AppTaskList {...tasks} />\r\n\r\n          </div>\r\n\r\n          <div className=\"CompletedTasks\">\r\n            <Typography gutterBottom variant=\"h6\" component=\"h2\" style={{ padding: '.5em 0', marginTop: '1em' }}>Completed Tasks:</Typography>\r\n            <AppTaskList  {...tasks} is_completed />\r\n          </div>\r\n        </Grid>\r\n        {/* !SHOW TASK LIST COMPONENT */}\r\n\r\n        {/* ADD TASK FLOATING ACTION BUTTON */}\r\n        <Grid item xs={12} sm={2}>\r\n          <div className=\"TaskManagerAddTask\" style={{ textAlign: 'center', margin: '2em 0' }}>\r\n            <Fab color=\"primary\" aria-label=\"add Task\" onClick={() => formDispatch({ type: 'TOGGLE_FORM' })}><AddIcon /></Fab>\r\n          </div>\r\n        </Grid>\r\n        {/* !ADD TASK FLOATING ACTION BUTTON */}\r\n      </Grid>\r\n      {/* !GRID CONTAINER */}\r\n\r\n      {/* FORM COMPONENT */}\r\n      <div className='TaskManagerForm'>\r\n        <AppTaskForm />\r\n      </div>\r\n      {/* !FORM COMPONENT */}\r\n\r\n    </section>\r\n  )\r\n}\r\n\r\n\r\nexport default Homepage\r\n","import Homepage from \"pages/Homepage\"\r\n\r\nconst AppRoutes = [\r\n    {\r\n        id: 'homepage',\r\n        name: 'Homepage',\r\n        path: '/',\r\n        page: Homepage,\r\n        inMenu: false\r\n    },\r\n\r\n]\r\nexport default AppRoutes\r\n","import React from 'react'\r\nimport { Typography } from '@material-ui/core'\r\nconst AppFooter = () => {\r\n    return (\r\n        <footer style={{ textAlign: 'center' }}>\r\n            <Typography variant=\"body2\" component=\"p\">\r\n                Steven Jackson - 2020\r\n            </Typography>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default AppFooter\r\n","import React from 'react';\r\nimport { Drawer, List, Divider, ListItem, ListItemIcon, ListItemText } from '@material-ui/core';\r\nimport AppRoutes from 'global/AppRoutes.module'\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nconst AppDrawer = (props) => {\r\n    const { appDrawerIsOpen, toggleDrawer } = props\r\n\r\n    const handletoggleDrawer = (event) => {\r\n        if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\r\n            return;\r\n        }\r\n        toggleDrawer()\r\n    };\r\n\r\n    return (\r\n        <section className=\"AppDrawer\">\r\n            {<Drawer\r\n                anchor=\"left\"\r\n                open={appDrawerIsOpen}\r\n                onClick={handletoggleDrawer}>\r\n\r\n                <Divider />\r\n                <List style={{ width: '250px' }}>\r\n                    {AppRoutes.map(route => {\r\n                        return <ListItem key={route.id}>\r\n                            <ListItemIcon><FontAwesomeIcon icon={route.icon} /></ListItemIcon>\r\n                            <Link to={route.path} style={{textDecoration: 'none'}}><ListItemText primary={route.name}/></Link>\r\n                        </ListItem>\r\n                    })}\r\n                </List>\r\n                <Divider />\r\n            </Drawer>}\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default withRouter(AppDrawer)","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { AppBar, Toolbar, Button, Typography } from '@material-ui/core';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport AppRoutes from 'global/AppRoutes.module'\r\n\r\nconst AppNavBar = (props) => {\r\n\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n                        React Task Manager\r\n            </Typography>\r\n\r\n                    {AppRoutes.map(route => {\r\n                        if (route.inMenu) {\r\n                            return <Link key={route.id} to={route.path} style={{ textDecoration: 'none' }}>\r\n                                <Button style={{ color: 'white' }}>{route.name}</Button>\r\n                            </Link>\r\n                        }\r\n                        return ''\r\n                    })}\r\n                </Toolbar>\r\n            </AppBar>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n}));\r\n\r\nexport default withRouter(AppNavBar)","import React from 'react'\r\nimport AppNavBar from 'components/AppNavBar'\r\n\r\nconst AppHeader = () => {\r\n    return (\r\n        <header className=\"App-header\">\r\n            <AppNavBar />\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default AppHeader\r\n","import { useState } from 'react'\r\nexport default initialVal => {\r\n    const [state, setState] = useState(initialVal);\r\n\r\n    const handleChange = e => {\r\n        (typeof e === 'object') ? setState(e.target.value) : setState(e);\r\n    }\r\n    return [state, handleChange]\r\n}","import React, { useContext, useEffect, forwardRef } from 'react';\r\nimport { StoreContext, TaskFormContext } from 'context/TaskStore';\r\nimport { DATE_TODAY, parseDate } from 'utils/common/index';\r\nimport useInputState from 'utils/hooks/useInputState';\r\n\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, Slide, TextField } from '@material-ui/core';\r\n\r\nconst Transition = forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nexport default function AppTaskForm() {\r\n\r\n    // eslint-disable-next-line no-unused-vars\r\n    const [state, dispatch] = useContext(StoreContext);\r\n    const [formState, formDispatch] = useContext(TaskFormContext);\r\n\r\n    const [inputTaskName, setInputTaskName] = useInputState('');\r\n    const [inputTaskDesc, setInputTaskDesc] = useInputState('');\r\n    const [inputTaskDueDate, setInputTaskDueDate] = useInputState(DATE_TODAY);\r\n\r\n    // SET PAYLOAD FOR REDUCERS\r\n    const payload = {\r\n        'id': (formState.task.id) ? formState.task.id : 0,\r\n        'task_name': inputTaskName,\r\n        'task_description': inputTaskDesc,\r\n        'due_date': inputTaskDueDate,\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        // IF FORM IS IN EDIT MODE SET INPUT VALUES OR SET TO BLANK TO ADD A NEW TASK\r\n        if (formState.isEdit) {\r\n            const { task_name, task_description, due_date } = formState.task;\r\n            setInputTaskName(task_name)\r\n            setInputTaskDesc(task_description)\r\n            setInputTaskDueDate(due_date)\r\n        } else {\r\n            setInputTaskName('')\r\n            setInputTaskDesc('')\r\n            setInputTaskDueDate(DATE_TODAY)\r\n        }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [formState])\r\n\r\n    const validateInputs = () => {\r\n        if (!inputTaskName || !inputTaskDesc || !inputTaskDueDate) {\r\n            formDispatch({ type: 'SHOW_SNACKBAR', payload: { snackBar: { isOpen: true, type: 'error', message: 'Fields cannot be empty' } } })\r\n        } else {\r\n            handleSubmitTask()\r\n        }\r\n    }\r\n\r\n    const handleSubmitTask = () => {\r\n\r\n        // IF FORM IS IN EDIT MODE. UPDATE THE TASK OR ADD A NEW TASK\r\n        if (formState.isEdit) {\r\n            dispatch({ type: 'UPDATE_TASK', payload: payload })\r\n            formDispatch({ type: 'SHOW_SNACKBAR', payload: { snackBar: { isOpen: true, type: 'success', message: 'Task Updated Successfully' } } })\r\n\r\n            handleClose()\r\n            formDispatch({ type: 'RESET_FORM_STATE' })\r\n        } else {\r\n            dispatch({ type: 'ADD_TASK', payload: payload })\r\n            formDispatch({ type: 'SHOW_SNACKBAR', payload: { snackBar: { isOpen: true, type: 'success', message: 'Task Added Successfully' } } })\r\n            handleClose()\r\n        }\r\n\r\n    }\r\n\r\n    const handleClose = () => {\r\n        // TOGGLE THE DIALOG WITH THE TASK FORM\r\n        formDispatch({ type: 'TOGGLE_FORM' })\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n\r\n            <Dialog\r\n                open={formState.isOpen}\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                onClose={handleClose}\r\n                aria-labelledby=\"task-manager-form\"\r\n                aria-describedby=\"task-manager-form-dialog\">\r\n                <DialogTitle id=\"task-manager-form-dialog-title\">{\"Add New Task\"}</DialogTitle>\r\n                <DialogContent>\r\n\r\n                    <TextField id=\"taskName\" label=\"Task Name\" onChange={setInputTaskName} value={inputTaskName} fullWidth required />\r\n\r\n                    <TextField\r\n                        id=\"task_description\"\r\n                        label=\"Task Description\"\r\n                        onChange={setInputTaskDesc}\r\n                        multiline\r\n                        rows={4}\r\n                        fullWidth\r\n                        style={{ margin: '1.5em 0' }}\r\n                        value={inputTaskDesc}\r\n                        required\r\n                    />\r\n\r\n                    <TextField\r\n                        id=\"taskDueDate\"\r\n                        onChange={setInputTaskDueDate}\r\n                        label=\"Due Date\"\r\n                        type=\"date\"\r\n                        fullWidth\r\n                        InputLabelProps={{\r\n                            shrink: true,\r\n                        }}\r\n                        style={{ margin: '1em 0' }}\r\n                        defaultValue={(inputTaskDueDate) ? parseDate(inputTaskDueDate) : DATE_TODAY()}\r\n                        required\r\n                    />\r\n\r\n                </DialogContent>\r\n\r\n                <DialogActions>\r\n                    <Button onClick={handleClose} color=\"primary\">Cancel</Button>\r\n                    <Button onClick={validateInputs} type='submit' color=\"primary\" variant='contained'>Save</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}","import React, { useContext } from 'react'\r\nimport { StoreContext, TaskFormContext } from 'context/TaskStore';\r\nimport { Button, ExpansionPanelSummary, ExpansionPanelDetails, ExpansionPanel, Checkbox, FormControlLabel, Typography, Grid } from '@material-ui/core';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\n\r\nconst AppTaskListItem = (props) => {\r\n    const { id, task_name, task_description, is_completed, is_highlighted } = props\r\n    // eslint-disable-next-line no-unused-vars\r\n    const [state, dispatch] = useContext(StoreContext);\r\n    // eslint-disable-next-line no-unused-vars\r\n    const [formState, formDispatch] = useContext(TaskFormContext);\r\n\r\n    const handleEditClick = (e) => {\r\n        formDispatch({ type: 'SET_EDIT_MODE', payload: props })\r\n    }\r\n    const handleDelete = () => {\r\n        formDispatch({ type: 'SHOW_SNACKBAR', payload: { snackBar: { isOpen: true, type: 'info', message: 'Task Deleted' } } })\r\n        dispatch({ type: 'DELETE_TASK', payload: id })\r\n    };\r\n\r\n    return (\r\n        <ExpansionPanel>\r\n            <ExpansionPanelSummary style={{ color: '#fff', backgroundColor: (is_highlighted) ? '#009688' : is_completed ? '#3f51b5' : '#404040' }}\r\n                expandIcon={<ExpandMoreIcon style={{ color: '#fff' }} />}\r\n                aria-label=\"Expand\"\r\n                aria-controls=\"task-description-content-header\"\r\n                id=\"task-description-content-header\">\r\n\r\n                <FormControlLabel\r\n                    aria-label=\"Is Completed\"\r\n                    control={<Checkbox\r\n                        style={{ color: is_completed ? '#fff' : 'inherit' }}\r\n                        checked={is_completed}\r\n                        onChange={() => dispatch({ type: 'TOGGLE_COMPLETED', payload: id })} />\r\n                    }\r\n                    label={`${task_name}`} />\r\n            </ExpansionPanelSummary>\r\n\r\n            <ExpansionPanelDetails>\r\n                <Grid container>\r\n                    <Grid item xs={12}>\r\n                        <Typography color=\"textSecondary\" style={{ padding: '0.5em 0px 3em 0 ', textAlign: 'left' }}>{task_description}</Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12} style={{ textAlign: 'center' }}>\r\n                        {!is_completed && <Button variant=\"contained\" color=\"primary\" onClick={handleEditClick} style={{ marginRight: '1em' }}>Edit</Button>}\r\n                        <Button variant=\"contained\" color=\"secondary\" onClick={handleDelete}>Delete</Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </ExpansionPanelDetails>\r\n\r\n        </ExpansionPanel>\r\n    )\r\n}\r\n\r\n\r\nAppTaskListItem.defaultProps = {\r\n    id: 1,\r\n    task_name: 'Default Task',\r\n    task_description: 'Default Description',\r\n    is_completed: false,\r\n    created_at: 'date',\r\n    updated_at: 'date',\r\n    due_date: 'date'\r\n}\r\n\r\nexport default AppTaskListItem\r\n","import React, { useContext } from 'react'\r\nimport { StoreContext } from 'context/TaskStore';\r\nimport AppTaskListItem from './AppTaskListItem/index';\r\n\r\nconst AppTaskList = (props) => {\r\n    const { is_completed } = props;\r\n    // eslint-disable-next-line no-unused-vars\r\n    const [{tasks}, dispatch] = useContext(StoreContext);\r\n\r\n    const taskList =\r\n        (is_completed) ?\r\n            tasks.filter(task => task.is_completed) :\r\n            tasks.filter(task => !task.is_completed);\r\n\r\n    return (\r\n        <div>\r\n            {taskList.map(task => {\r\n                return <AppTaskListItem key={task.id} {...task} />\r\n            })}\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nAppTaskList.defaultProps = {\r\n    tasks: [{\r\n        id: 1,\r\n        task_name: 'Open Default Task',\r\n        task_description: 'Default Task Description',\r\n        is_completed: false,\r\n        created_at: 'date',\r\n        updated_at: 'date',\r\n        due_date: 'date'\r\n    },\r\n    {\r\n        id: 2,\r\n        task_name: 'Open Default Task',\r\n        task_description: 'Default Task Description',\r\n        is_completed: true,\r\n        created_at: 'date',\r\n        updated_at: 'date',\r\n        due_date: 'date'\r\n    },\r\n    ]\r\n}\r\n\r\nexport default AppTaskList\r\n","import React from 'react'\r\nimport { Route, Switch, useLocation } from \"react-router-dom\";\r\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\r\nimport AppRoutes from 'global/AppRoutes.module'\r\n\r\nconst AppRenderRoutes = () => {\r\n    let location = useLocation();\r\n    return (\r\n        <TransitionGroup>\r\n            <CSSTransition\r\n                key={location.id}\r\n                classNames=\"fade\"\r\n                timeout={{ enter: 800, exit: 0 }}>\r\n\r\n                <Switch location={location}>\r\n                    {AppRoutes.map(route => {\r\n                        return <Route key={route.id} exact path={route.path} component={route.page} />\r\n                    })}\r\n                    <Route exact path='' render={() => `404 - Page Not Found`} />\r\n                </Switch>\r\n            </CSSTransition>\r\n        </TransitionGroup>\r\n    )\r\n}\r\n\r\n\r\nexport default AppRenderRoutes\r\n","import React from 'react';\r\nimport { AppHeader, AppFooter } from 'components';\r\nimport { Container } from '@material-ui/core'\r\nimport AppRenderRoutes from 'global/AppRenderRoutes.module';\r\nimport 'global/global.css';\r\nimport TaskStore from 'context/TaskStore';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <TaskStore>\r\n        <AppHeader />\r\n        <Container style={{ marginBottom: '2em' }}>\r\n          <AppRenderRoutes />\r\n        </Container>\r\n        <AppFooter />\r\n      </TaskStore>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <BrowserRouter basename='/react-taskmanager'>\r\n        <App />\r\n    </BrowserRouter>, document.getElementById('root'));\r\n"],"sourceRoot":""}